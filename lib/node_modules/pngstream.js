var Stream = require('stream');
var Util = require('util');

var STATE_CLOSED = -1;
var STATE_INIT = 0;
var STATE_CHUNK_HEADER = 1;
var STATE_CHUNK_BODY = 2;
var STATE_CHUNK_CRC = 3;

function PNGHeaderError(){
	Error.apply(this, arguments);
}
Util.inherits(PNGHeaderError, Error);

function PNGParserStream (){
	Stream.call(this);
}

Util.inherits(PNGParserStream, Stream);

PNGParserStream.prototype.write = function write (buf) {
	if (this._bufferRemainders){
		buf = Buffer.concat([this._bufferRemainders, buf]);
		delete this._bufferRemainders;
	}
	if (buf.length === 0){
		return true;
	}
	switch (this._state){
		case STATE_INIT:
			if (buf.length < 8){
				this._bufferRemainders = buf;
				return true;
			}
			var headerBuf = buf.slice(0, 8);
			if (headerBuf.toString('hex') === '89504e470d0a1a0a'){
				this.emit('png-header', headerBuf);
				this._state = STATE_CHUNK_HEADER;
				return this.write(buf.slice(8));
			} else {
				this._state = STATE_CLOSED;
				this.emit('error', new PNGHeaderError());
				return false;
			}
		break;
		case STATE_CHUNK_HEADER:
			if (buf.length < 8){
				this._bufferRemainders = buf;
				return true;
			}
			var length = buf.readUInt32BE(0);
			var name = buf.slice(4, 8).toString('ascii');
			this._chunk = name;
			this.emit('chunk-header', buf.slice(0, 8), {name: name, length: length});
			if (length > 0){
				this._state = STATE_CHUNK_BODY;
				this._chunkBodyLength = length;
			} else {
				this._state = STATE_CHUNK_CRC;
			}
			return this.write(buf.slice(8));
		break;
		case STATE_CHUNK_BODY:
			if (buf.length > this._chunkBodyLength){
				if (this._chunkBodyLength > 0){
					this.emit('chunk-body', buf.slice(0, this._chunkBodyLength));
				}
				var passNextPointer = this._chunkBodyLength;
				this._chunkBodyLength = 0;
				this._state = STATE_CHUNK_CRC;
				return this.write(buf.slice(passNextPointer));
			} else {
				this.emit('chunk-body', buf);
				this._chunkBodyLength -= buf.length;
			}
		break;
		case STATE_CHUNK_CRC:
			if (buf.length < 4){
				this._bufferRemainders = buf;
				return true;
			}
			this.emit('chunk-crc', buf.slice(0, 4));
			this._state = STATE_CHUNK_HEADER;
			return this.write(buf.slice(4));
	}
	return true;
};

PNGParserStream.prototype.end = function end () {
	this.state = STATE_CLOSED;
	this.emit('close');
	return true;
};

PNGParserStream.prototype.writable = true;

PNGParserStream.prototype._state = STATE_INIT;

module.exports.ParserStream = PNGParserStream;
module.exports.HeaderError = PNGHeaderError;